package com.liyihuanx.myjetpack

import com.liyihuanx.module_base.http.BaseRepository
import com.liyihuanx.module_base.http.RepositoryManager
import com.liyihuanx.module_base.http.datasource.CoroutineDataFetcher
import com.liyihuanx.module_base.utils.asToast
import com.liyihuanx.module_base.utils.coroutine
import kotlin.String
import kotlin.collections.List
import kotlinx.coroutines.flow.Flow
import kotlinx.coroutines.flow.collect
import java.lang.Exception

/**
 * This file is generated by kapt, please do not edit this file */
open class ConfigRepository : BaseRepository<ConfigService>() {
    suspend fun config(page: String): Flow<String> {
         return CoroutineDataFetcher {
                  apiService.config(page) 
                }.startFetchData()
    }

    suspend fun config2(page: String = "GS"): Flow<List<String>> {
         return CoroutineDataFetcher {
                  apiService.config2(page) 
                }.startFetchData()
    }

    suspend fun getData(): Flow<ChapterBean> {
         return CoroutineDataFetcher {
                  apiService.getData() 
                }.startFetchData()
    }

    /**
     * 最后想实现的效果
     */
    fun http(error: ((e: Exception) -> Unit)? = null): ChapterBean? {
        var result: ChapterBean? = null
        coroutine {
            doWork {
                getData().collect {
                    result = it
                }
            }
            catchError {
                error?.invoke(it)
            }

            onFinally {

            }
        }
        return result
    }
}
