package com.liyihuanx.compiler.repository

import com.liyihuanx.compiler.AptContext
import com.liyihuanx.compiler.BaseRepositoryClassType
import com.squareup.kotlinpoet.FileSpec
import com.squareup.kotlinpoet.KModifier
import com.squareup.kotlinpoet.ParameterizedTypeName.Companion.parameterizedBy
import com.squareup.kotlinpoet.TypeSpec
import java.io.File
import javax.annotation.processing.Filer

/**
 * @author created by liyihuanx
 * @date 2021/9/6
 * @description: 用kotlinpoet生成仓库代码
 */
class RepositoryClassBuilder(private val repositoryClass: RepositoryClass) {


    companion object {
        /**
         * 后缀
         */
        const val POSIX = "Repository"
    }
    // 最终输出
//    open class ConfigReposity : BaseReposity<ConfigService>() {
//        fun rapidlyStatistic(uid: String, type: String): Observable<Any> {
//            return SimpleDataSource {
//                apiService.rapidlyStatistic(uid, type).filterHttpCode()
//            }.startFetchData()
//        }
//    }

    fun build(filer: Filer, mOutputDirectory: String) {
        val repClassName = getClassName() // xxxRepository
        // 文件
        val fileBuilder = FileSpec.builder(repositoryClass.packageName, repClassName)
        // 类
        val typeBuilder = TypeSpec.classBuilder(repClassName)
            .addModifiers(KModifier.PUBLIC)
            .addModifiers(KModifier.OPEN)
            // 获得带泛型的类，放入具体的参数
            .superclass((BaseRepositoryClassType).parameterizedBy(repositoryClass.serviceType)) // 【BaseRepository<T>】
            .addKdoc("This file is generated by kapt, please do not edit this file")
        // 添加类里面的内容
        startFuncBuild(typeBuilder)
        fileBuilder.addType(typeBuilder.build())

        // 写出
        fileBuilder.build().writeTo(File(mOutputDirectory))

    }

    /**
     * 添加类里面的方法
     */
    private fun startFuncBuild(typeBuilder: TypeSpec.Builder) {
        // 遍历方法
        repositoryClass.methods.forEach {
            AutoApiFuncBuilder(it).build(typeBuilder)
        }
    }


    /**
     * 将接口 xxxService 截取出名字，然后拼接上 Repository 作为类名
     */
    private fun getClassName(): String {
        val str = repositoryClass.simpleName
        if (str.contains("Service")) {
            val strs = str.split("Service")
            if (strs.size > 1) {
                return strs[0] + POSIX
            }
        }
        return str
    }
}