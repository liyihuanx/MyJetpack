package com.liyihuan.module_common.service

import com.liyihuan.module_common.bean.ChapterBean
import com.liyihuanx.module_base.http.BaseRepository
import com.liyihuanx.module_base.http.datasource.CoroutineDataFetcher
import com.liyihuanx.module_base.utils.viewModelScopeCoroutine
import java.lang.Exception
import kotlin.Int
import kotlin.String
import kotlin.Unit
import kotlin.collections.List
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.flow.collect

/**
 * This file is generated by kapt, please do not edit this file */
open class ConfigRepository : BaseRepository<ConfigService>() {
    fun config2(
        page: String = "GS",
        viewModelScope: CoroutineScope,
        onError: ((e: Exception) -> Unit)? = null,
        onComplete: (() -> Unit)? = null,
        onResult: (List<String>?) -> Unit
    ) {
        viewModelScopeCoroutine(viewModelScope) {
                doWork { 
                	CoroutineDataFetcher { apiService.config2(page) }.startFetchData(1,
                		"cache//com.liyihuan.module_common.service.ConfigService//config2?page=${page}",
                		1800000
                	).collect {
                		onResult.invoke(it) 
                	} 
                } 
                catchError { onError?.invoke(it) } 
                onFinally { onComplete?.invoke() } 
                }
    }

    fun getData(
        cacheStrategy: Int,
        viewModelScope: CoroutineScope,
        onError: ((e: Exception) -> Unit)? = null,
        onComplete: (() -> Unit)? = null,
        onResult: (List<ChapterBean>?) -> Unit
    ) {
        viewModelScopeCoroutine(viewModelScope) {
                doWork { 
                	CoroutineDataFetcher { apiService.getData() }.startFetchData(cacheStrategy,
                 		"cache//com.liyihuan.module_common.service.ConfigService//getData?cacheStrategy=${cacheStrategy}",
                		1800000
                ).collect {
                		onResult.invoke(it) 
                	} 
                } 
                catchError { onError?.invoke(it) } 
                onFinally { onComplete?.invoke() } 
                }
    }

    suspend fun config(): ChapterBean = apiService.config()
}
